#3.1 Names: Store the names of a few people in a list called names. Print each person's name by accesing each elemtn in the list, one at a time.

friends = ['Mari', 'Irene', 'Lidia', 'Laura', 'Sara']
print (friends)

#3.2. Greetings: Start with the list you used in 3.1, but instead of just printing each person's name, print a message to them. 
print(f"¡Bienvenido/a, {friends[0]}!")
print(f"¡Bienvenido/a, {friends[1]}!")
print(f"¡Bienvenido/a, {friends[2]}!")
print(f"¡Bienvenido/a, {friends[3]}!")
print(f"¡Bienvenido/a, {friends[4]}!")

#with for would be:
for friend in friends:
    print(f"Bienvenida, {friend}!")

#3.3. Your Own List: think of your favorite mode of transportation and make a list that stores several examples.abs
#Use your list to print a series of statements about these items, such as "I would like to own a Honda motorcycle"
fav_transport = ['BMW', 'KIA', 'SEAT', 'CUPRA', 'FORD']

print (f"If I had tons of money probably I would have a {fav_transport[0]}")
print (f"In my favorite sport, there are a lot of announcements about {fav_transport[3]}")
print (f'In one of my favorite TV show, Dexter, he has a {fav_transport[4]}.')
print (f'My sister has a {fav_transport[1]}')

#3-4. Guest List: If you could invite anyone, living or deceased, to dinner, who
#would you invite? Make a list that includes at least three people you’d like to
#invite to dinner . Then use your list to print a message to each person, inviting
#them to dinner .

Guest_list= ["Antonio Rico", "Yung Blood", "Demi Lovato", "Miley Cyrus", "Green Day Band", "Samuraï"]

for guest in Guest_list:
    print (f"Hello {guest}, you are invited tonight to the MAFIA club, at 21:00pm")

# ================================================================================================================================================

# 3-5. Changing Guest List: You just heard that one of your guests can’t make the
# dinner, so you need to send out a new set of invitations . You’ll have to think of
# someone else to invite .




# •	 Start with your program from Exercise 3-4 . Add a print statement at the
# end of your program stating the name of the guest who can’t make it .
print (f"Ops, the artist {Guest_list[2]} can't assist tonight.")

# •	 Modify your list, replacing the name of the guest who can’t make it with
# the name of the new person you are inviting .

Guest_list[2] = 'Mum'

print (Guest_list)

# •	 Print a second set of invitation messages, one for each person who is still
# in your list .

print (f"Welcome to our tonight party, {Guest_list[0]}")
print (f"We hope you have a wonderfull night with us, {Guest_list[1]}")
print (f"We are greatfull to have you tonight, {Guest_list[2]}")
print (f"Beware tonight please, {Guest_list[3]}")
print (f"We are happy to have you tonight, {Guest_list[4]}")
# ================================================================================================================================================

# 3-6. More Guests: You just found a bigger dinner table, so now more space is
# available . Think of three more guests to invite to dinner .

# •	 Start with your program from Exercise 3-4 or Exercise 3-5 . Add a print
# statement to the end of your program informing people that you found a
# bigger dinner table .

for guest in Guest_list:
    print (f"Hey, {guest}, We are happy to announce we have room for 3 more in our table.")

# •	 Use insert() to add one new guest to the beginning of your list .
Guest_list.insert(0, 'Eli')
# •	 Use insert() to add one new guest to the middle of your list .
Guest_list.insert(2, 'Ana G.')
# •	 Use append() to add one new guest to the end of your list .
Guest_list.append('Luis')
# •	 Print a new set of invitation messages, one for each person in your list .
for guest in Guest_list:
    print (f"Hi, {guest} we are happy to have you tonight!")
    
print (f"Checking our {Guest_list}")

# ================================================================================================================================================
#3 -7.  Shrinking Guest List: You just found out that your new dinner table won’t
# arrive in time for the dinner, and you have space for only two guests .

# •	 Start with your program from Exercise 3-6 . Add a new line that prints a
# message saying that you can invite only two people for dinner .
for guest in Guest_list:
    print (f"Hey, {guest}, we are sorry but we only have room for 2 people.")

# •	 Use pop() to remove guests from your list one at a time until only two
# names remain in your list . Each time you pop a name from your list, print
# a message to that person letting them know you’re sorry you can’t invite
# them to dinner .
print (Guest_list)
while len(Guest_list)>2:
    removed_guest = Guest_list.pop()
    print (f"Sorry, {removed_guest} we don't have room for you.")
print (Guest_list)


# •	 Print a message to each of the two people still on your list, letting them
# know they’re still invited .
print (f"Hey, {Guest_list[0]} we still count with you tonight!")
print (f"Hey, {Guest_list[1]} we still count with you tongiht!")
print (Guest_list)
# •	 Use del to remove the last two names from your list, so you have an empty
# list . Print your list to make sure you actually have an empty list at the end
# of your program .
del Guest_list[0]
del Guest_list[0]
print (Guest_list)

# ================================================================================================================================================
# 3-8. SEEING THE WORLD: Think of at least five places in the world you’d like to
# visit .
# •	 Store the locations in a list . Make sure the list is not in alphabetical order .

countries = ["Canada", "Australia", "France","Japan"]
# •	 Print your list in its original order . Don’t worry about printing the list neatly,
# just print it as a raw Python list .
print (countries)

# •	 Use sorted() to print your list in alphabetical order without modifying the
# actual list .

print (sorted(countries))
# •	 Show that your list is still in its original order by printing it .

print (countries)
# •	 Use sorted() to print your list in reverse alphabetical order without changing
# the order of the original list .
print (sorted(countries, reverse=True))
# •	Show that your list is still in its original order by printing it again .
print (countries)
# •	 Use reverse() to change the order of your list . Print the list to show that its
# order has changed .
print (countries)
# •	 Use reverse() to change the order of your list again . Print the list to show
# it’s back to its original order .
countries.reverse()
print(f"This is the reverse: {countries}")
countries.reverse()
print("Restored to original order:", countries)

# •	 Use sort() to change your list so it’s stored in alphabetical order . Print the
# list to show that its order has been changed .
countries.sort()
print(countries)
# •	 Use sort() to change your list so it’s stored in reverse alphabetical order .
countries.sort(reverse=True)
# Print the list to show that its order has changed .
print(f"This is the reverse alphabetical order: {countries}")

# ================================================================================================================================================
# 3-9. Dinner Guests: Working with one of the programs from Exercises 3-4
# through 3-7 (page 46), use len() to print a message indicating the number
# of people you are inviting to dinner .
from second_part import Guest_list
total_invitation = len(Guest_list)
print(f"I've invited : {total_invitation} guests")

#================================================================================================================================================
# 3-10. Every Function: Think of something you could store in a list . For example,
# you could make a list of mountains, rivers, countries, cities, languages, or anything else you’d like . 
# Write a program that creates a list containing these items
# and then uses each function introduced in this chapter at least once .

ice_cream_flavors=["Vanila", "Chocolate", "Turron", "Pistacho", "Oreo"]

# Imprimir la lista original
print("Original list:", ice_cream_flavors)

# 1. append() - Añadir un sabor al final de la lista
ice_cream_flavors.append("Cookie dough")
print("After append('Cookie dough'):", ice_cream_flavors)

# 2. insert() - Insertar un sabor en una posición específica
ice_cream_flavors.insert(2, "Strawberry")
print("After insert(2, 'Strawberry'):", ice_cream_flavors)

# 3. del - Eliminar un sabor por índice
del ice_cream_flavors[1]
print("After del ice_cream_flavors[1]:", ice_cream_flavors)

# 4. pop() - Eliminar y obtener el último sabor de la lista
popped_flavor = ice_cream_flavors.pop()
print("After pop():", ice_cream_flavors)
print("Popped flavor:", popped_flavor)

# 5. remove() - Eliminar un sabor por valor
ice_cream_flavors.remove("Strawberry")
print("After remove('Strawberry'):", ice_cream_flavors)

# 6. sort() - Ordenar la lista en orden alfabético
ice_cream_flavors.sort()
print("After sort():", ice_cream_flavors)

# 7. sorted() - Imprimir la lista ordenada en orden inverso sin cambiar el orden original
print("Sorted list in reverse order:", sorted(ice_cream_flavors, reverse=True))

# 8. reverse() - Invertir el orden de la lista
ice_cream_flavors.reverse()
print("After reverse():", ice_cream_flavors)

# 9. len() - Obtener la longitud de la lista
print("Length of the list:", len(ice_cream_flavors))
